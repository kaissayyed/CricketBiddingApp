@page "/create-auction"
@inject HttpClient Http

<h3>Create New Auction</h3>

<EditForm Model="newAuction" OnValidSubmit="SubmitAuction">
    <div class="form-group">
        <label for="startTime">Start Time</label>
        <InputDate id="startTime" @bind-Value="newAuction.StartTime" class="form-control" />
    </div>
    <div class="form-group">
        <label for="endTime">End Time</label>
        <InputDate id="endTime" @bind-Value="newAuction.EndTime" class="form-control" />
    </div>

    <h4>Auction Rule</h4>
    <div class="form-group">
        <label for="playerLimit">Player Limit</label>
        <InputNumber id="playerLimit" @bind-Value="newAuction.AuctionRule.PlayerLimit" class="form-control" />
    </div>
    <div class="form-group">
        <label for="maxBudget">Max Budget</label>
        <InputNumber id="maxBudget" @bind-Value="newAuction.AuctionRule.MaxBudget" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Create Auction</button>
</EditForm>

@code {
    private Auction newAuction = new Auction
        {
            AuctionRule = new AuctionRule()
        };

    private async Task SubmitAuction()
    {
        var response = await Http.PostAsJsonAsync("api/Auction", newAuction);

        if (response.IsSuccessStatusCode)
        {
            // Handle successful creation, e.g., show a success message or redirect
            // NavigationManager.NavigateTo("/auction-success");
        }
        else
        {
            // Handle failure, e.g., show an error message
        }
    }

    public class Auction
    {
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public AuctionRule AuctionRule { get; set; }
    }

    public class AuctionRule
    {
        public int PlayerLimit { get; set; }
        public decimal MaxBudget { get; set; }
    }
}
